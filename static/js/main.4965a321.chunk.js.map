{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","useState","numeroProva","setNumeroProva","valoreDaInserire","setValoreDaInserire","answer","setAnswer","showAnswer","setShowAnswer","top","w","p","m","mb","defaultValue","onChange","valueString","parseInt","value","min","e","target","placeholder","colorScheme","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"oQAwEeA,MA3Df,WACE,MAAsCC,mBAAS,GAA/C,mBAAOC,EAAP,KAAoBC,EAApB,KACA,EAAgDF,mBAAS,IAAzD,mBAAOG,EAAP,KAAyBC,EAAzB,KACA,EAA4BJ,mBAAS,IAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAoCN,oBAAS,GAA7C,mBAAOO,EAAP,KAAmBC,EAAnB,KAYA,OACE,eAAC,IAAD,WACE,cAAC,IAAD,UACE,cAAC,IAAD,CAAKC,IAAK,GAAIC,EAAE,MAAMC,EAAG,EAAzB,SACE,cAAC,IAAD,4FAMJ,eAAC,IAAD,CAAKF,IAAK,GAAIC,EAAE,MAAMC,EAAG,EAAGC,EAAE,OAA9B,UACE,cAAC,IAAD,CAAMC,GAAI,EAAV,4CACA,cAAC,IAAD,CACEC,aAAc,EACdC,SAAU,SAACC,GAAD,OAAiBd,EAAee,SAASD,KACnDE,MAAOjB,EACPkB,IAAK,EAJP,SAME,cAAC,IAAD,SAGJ,eAAC,IAAD,CAAKV,IAAK,GAAIC,EAAE,MAAMC,EAAG,EAAGC,EAAE,OAA9B,UACE,cAAC,IAAD,CAAMC,GAAI,EAAV,wCACA,cAAC,IAAD,CACEE,SAAU,SAACK,GAAD,OAAOhB,EAAoBgB,EAAEC,OAAOH,QAC9CA,MAAOf,EACPmB,YAAY,aAGhB,cAAC,IAAD,CAAKb,IAAK,GAAIC,EAAE,MAAMC,EAAG,EAAGC,EAAE,OAA9B,SACE,cAAC,IAAD,CAAQW,YAAY,OAAOC,QAxCb,WACE,IAAhBvB,GAA0C,MAArBE,GACvBG,EAAU,QACVE,GAAc,KAEdF,EAAU,UACVE,GAAc,KAkCZ,sCAIDD,EACC,cAAC,IAAD,CAAKE,IAAK,GAAIC,EAAE,MAAMC,EAAG,EAAGC,EAAE,OAA9B,SACE,cAAC,IAAD,UAAUP,MAEV,SCrDKoB,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCSdQ,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.4965a321.chunk.js","sourcesContent":["import {\n  Box,\n  Heading,\n  Center,\n  Input,\n  Text,\n  Button,\n  NumberInput,\n  NumberInputField,\n} from \"@chakra-ui/react\";\nimport { useState } from \"react\";\nimport \"./App.css\";\n\nfunction App() {\n  const [numeroProva, setNumeroProva] = useState(0);\n  const [valoreDaInserire, setValoreDaInserire] = useState(\"\");\n  const [answer, setAnswer] = useState(\"\");\n  const [showAnswer, setShowAnswer] = useState(false);\n\n  const checkAnswer = () => {\n    if (numeroProva === 1 && valoreDaInserire === \"a\") {\n      setAnswer(\"link\");\n      setShowAnswer(true);\n    } else {\n      setAnswer(\"errore\");\n      setShowAnswer(true);\n    }\n  };\n\n  return (\n    <Box>\n      <Center>\n        <Box top={10} w=\"50%\" p={4}>\n          <Heading>\n            Ora inserirete prima il numero della vostra prova e poi la parola\n            magica!\n          </Heading>\n        </Box>\n      </Center>\n      <Box top={10} w=\"50%\" p={4} m=\"auto\">\n        <Text mb={4}>Inserire il numero della prova</Text>\n        <NumberInput\n          defaultValue={0}\n          onChange={(valueString) => setNumeroProva(parseInt(valueString))}\n          value={numeroProva}\n          min={0}\n        >\n          <NumberInputField />\n        </NumberInput>\n      </Box>\n      <Box top={10} w=\"50%\" p={4} m=\"auto\">\n        <Text mb={4}> Inserire la parola magica</Text>\n        <Input\n          onChange={(e) => setValoreDaInserire(e.target.value)}\n          value={valoreDaInserire}\n          placeholder=\"Dario\"\n        ></Input>\n      </Box>\n      <Box top={10} w=\"50%\" p={4} m=\"auto\">\n        <Button colorScheme=\"blue\" onClick={checkAnswer}>\n          Controlla i risultati!\n        </Button>\n      </Box>\n      {showAnswer ? (\n        <Box top={10} w=\"50%\" p={4} m=\"auto\">\n          <Heading>{answer}</Heading>\n        </Box>\n      ) : null}\n    </Box>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// 1. import `ChakraProvider` component\nimport { ChakraProvider } from \"@chakra-ui/react\"\n\n// function App({ Component }: any) {\n//   // 2. Use at the root of your app\n//   return (\n//     <ChakraProvider>\n//       <Component />\n//     </ChakraProvider>\n//   )\n// }\n\nReactDOM.render(\n  <ChakraProvider>\n    <App />\n  </ChakraProvider>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}